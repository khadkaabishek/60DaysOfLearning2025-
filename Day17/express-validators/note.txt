



🌟 Day 17 of Learning 🌟
Today, I explored how to set up TypeScript in my Node.js application(especially using express validator )
 — from installation to handling 
real-world compiler errors and learning how Express types really work.

🎯 What I learned today:
1. Installed all required dependencies
 I added both standard and development dependencies: `express`, `typescript`, `ts-node`, `@types/express`,
 and `@types/node`.

2. Set up project structure

 I created a proper folder layout with `src/` for code, `dist/` for compiled JS, and configured `tsconfig.json`
 to manage compilation paths and TypeScript settings.

3. Wrote and compiled TypeScript code

 I wrote a basic Express server in `.ts` and compiled it into `.js` using TypeScript’s compiler.

4. Faced and fixed TypeScript errors

 TypeScript’s strict type system caught mistakes early — like passing the wrong type to `express()`. This helped 
me understand how TypeScript treats function overloads and inference.

5. Understood Request and Response types better

 While debugging, I got a much deeper understanding of how `Request` and `Response` objects are typed in Express.
 I learned why TypeScript expects certain shapes and why `esModuleInterop` matters.


📌 Summary:
✔ I now know how to bootstrap a Node.js app with TypeScript
✔ I can configure `tsconfig.json` and understand what each setting does
✔ I saw firsthand how TypeScript improves developer clarity and catches bugs early
✔ Understanding typings in Express gives me better control over routing and middleware
✔ Errors are just learning points in disguise — today’s bugs led to deeper understanding

⎝^ _ ^⎠ On to the next day!




