
🌟 Day 11 of Learning 🌟
Today, I explored React Hooks — focusing on useEffect and useRef, both crucial for handling side 
effects and interacting with the DOM or persistent values.

🎯 What I learned today:
1. useEffect Overview
   I learned that useEffect is used to perform side effects like data fetching, setting up timers,
    or updating DOM elements in a functional component.

2. How useEffect Works
   I understood that useEffect runs code after the component renders. With an empty dependency array 
   `[]`, it runs only once — just like componentDidMount.

3. Real Use Cases of useEffect

   - Fetching data from APIs
   - Setting intervals and clearing them
   - Listening to window events (like resize)
   - Saving and loading data from local storage

4. useRef Basics
   I discovered that useRef can be used to reference DOM elements directly or store mutable values 
   that persist across renders without causing re-renders.

5. Real Use Cases of useRef
   - Focusing an input on page load
   - Keeping track of previous state values
   - Storing timer or interval IDs
   - Managing scroll position or video/audio controls

6. Code Examples I Practiced
   a. Focusing an input using useRef and useEffect
   b. Fetching user data with useEffect
   c. Creating a live timer
   d. Saving notes to localStorage
   e. Listening to window resize and updating width

📌 Summary:
✔ Learned the core concept and working of useEffect
✔ Explored multiple real-world useEffect applications
✔ Understood how useRef can persist data and interact with DOM
✔ Practiced writing hooks for dynamic and reactive UI behavior
✔ More confident in building logic-driven components with React

⎝^ _ ^⎠ Super excited for what’s next — swipe left to view code!


