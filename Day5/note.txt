


🌟 Day 5 of Learning 🌟  
Today, I focused on **Type Assertions** and **Casting** in TypeScript —
 how to tell the compiler what type a value should be, and why it’s sometimes necessary.

---

🎯 What I learned today:

1. **Type Assertion**  
* TypeScript allows you to assert a value’s type using `as Type`.  
* This is useful when you're certain of a value's structure but TypeScript cannot infer it automatically.

2. **Angle-Bracket vs `as` Syntax**  
* There are two ways to assert types — the angle-bracket (`<Type>value`) and the `as Type` syntax.  
* The `as` syntax is preferred, especially in `.tsx` files where angle brackets conflict with JSX.

3. **No Runtime Type Conversion**  
* Type assertions do not change the actual runtime type — they only affect how TypeScript checks types during compilation.  
* For true conversion (e.g., string to number), you still need JavaScript logic like `Number()` or `parseInt()`.

4. **Use Cases of Assertion**  
* Useful when dealing with `any` or `unknown` types — such as API responses or parsed JSON.  
* Especially helpful in DOM manipulation, where TypeScript can't always infer the correct element type.

5. **Why Assertion is Necessary**  
* It improves type safety, intellisense support, and reduces runtime bugs.  
* It helps TypeScript trust your knowledge about the data you're working with, while still checking for errors where possible.

---

📌 Summary:  
✔ Use `as` to assert known types when TypeScript cannot infer them  
✔ Avoid relying on assertions for real type conversion — handle it manually  
✔ Prefer type assertions when working with dynamic or external data  
✔ Use in DOM access, JSON parsing, and any scenario with `any` or `unknown`

// Swipe left to view kode  ⎝^ _ ^⎠

