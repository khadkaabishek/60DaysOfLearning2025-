


🌟 Day 21 of Learning 🌟
Today, I focused on **Building a Signup Feature with React Frontend and Express Backend
how to handle form submission, send data to the backend, and fix common integration issues
 like CORS and JSON parsing.

🎯 What I learned today:
1. React Signup Form & Fetch API
 Created a controlled form in React with name, email, and password fields.
 Used `fetch` to POST form data as JSON to the backend `/signup` endpoint.
 Managed form state and response messages to show success or errors.

2. Backend Signup Logic with Express and Mongoose
 Built a `/signup` route handler to accept JSON data, validate input, and check for existing users.
 Used bcrypt to hash passwords before saving users in MongoDB with Mongoose schema.
 Returned meaningful JSON responses for success and errors.

3. Common Integration Issues & Fixes
 Backend error `req.body` undefined fixed by adding `app.use(express.json())` middleware.
 Solved React-to-backend 500 errors caused by missing CORS setup by adding `cors` middleware.
 Learned how Postman bypasses CORS, which browsers enforce strictly, causing errors only in React.

4. Debugging Tips
 Logging request body in backend to verify data reception.
 Logging full response and errors in React for better troubleshooting.
 Using browser dev tools Network tab to inspect requests and responses.

5. Key Middleware in Express
 `express.json()` for parsing JSON payloads.
 `cors()` to enable cross-origin requests from frontend to backend.


📌 Summary:
✔ Use controlled React forms and `fetch` to send JSON data
✔ Always add `express.json()` and `cors()` middleware in Express backend
✔ Hash passwords securely before saving with bcrypt
✔ Debug backend errors by logging `req.body` and response messages
✔ Understand why CORS causes errors in browsers but not Postman

// Swipe left to view kode+progress  ⎝^ _ ^⎠



