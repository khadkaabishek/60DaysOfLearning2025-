
🌟 Day 9 of Learning 🌟
Today, I explored React’s `useContext` hook with TypeScript — diving into how to manage and
 share state across components in a scalable, type-safe way.

---

🎯 What I learned today:

1. Created and consumed context with TypeScript

      I built a custom context for a counter using `createContext` and consumed it via a custom
       hook called `UseCounter`. This helped simplify context access across components.

2. Typed context data with interfaces

      I learned to define the shape of the context using TypeScript interfaces, giving me strong
       typing and IntelliSense support for both state values and updater functions.

3. Built a Context Provider component

      I created a `ContextProvider` that wraps my app and provides shared state using `useState`. 
      I also learned the importance of using `.Provider` to wrap children properly.

4. Used context in a functional component

      I built a simple UI component that displays and updates the shared counter when clicked, 
      showing how deeply nested components can interact with shared state without prop drilling.

5. Handled form state with TypeScript

      I created a form component with an input field, managed input state using `useState`,
       and handled form submission using properly typed event handlers — all with real-time updates and validation awareness.



📌 Summary:
✔ I understand how `useContext` enables shared state across components
✔ I can confidently type context values and state setters in TypeScript
✔ I learned to structure provider and consumer logic cleanly
✔ I practiced typing React event handlers and using `useState` for input management
✔ I reinforced the idea that reusable logic (like custom hooks) improves code maintainability

⎝^ ‿ ^⎠ Each concept is building toward the bigger picture — feeling more confident with React and TypeScript every day!


